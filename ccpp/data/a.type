module GFS_typedefs
   use module_radsw_parameters,  only: topfsw_type, sfcfsw_type
   use module_radlw_parameters,  only: topflw_type, sfcflw_type
!> \section arg_table_GFS_typedefs
!! \htmlinclude GFS_typedefs.html
!    !--- GFS external initialization type
!    GFS_init_type
!    !--- GFS Derived Data Types (DDTs)
!    GFS_statein_type        !< prognostic state data in from dycore
!    GFS_stateout_type       !< prognostic state or tendencies return to dycore
!    GFS_sfcprop_type        !< surface fields
!    GFS_coupling_type       !< fields to/from coupling with other components (e.g. land/ice/ocean/etc.)
!    GFS_control_type        !< model control parameters
!    GFS_grid_type           !< grid and interpolation related data
!    GFS_tbd_type            !< to be determined data that doesn't fit in any one container
!    GFS_cldprop_type        !< cloud fields needed by radiation from physics
!    GFS_radtend_type        !< radiation tendencies needed in physics
!    GFS_diag_type           !< fields targetted for diagnostic output
!    GFS_data_type           !< combined type of all of the above except GFS_control_type
! GFS_init_type
!! \section arg_table_GFS_init_type
!! \htmlinclude GFS_init_type.html
  type GFS_init_type
    integer,           pointer :: tracer_types(:) !< tracers types: 0=generic, 1=chem,prog, 2=chem,diag
 end type GFS_init_type
! GFS_statein_type
!! \section arg_table_GFS_statein_type
!! \htmlinclude GFS_statein_type.html
  type GFS_statein_type
  end type GFS_statein_type
! GFS_stateout_type
!! \section arg_table_GFS_stateout_type
!! \htmlinclude GFS_stateout_type.html
  type GFS_stateout_type
  end type GFS_stateout_type
! GFS_sfcprop_type
!! \section arg_table_GFS_sfcprop_type
!! \htmlinclude GFS_sfcprop_type.html
  type GFS_sfcprop_type
    integer,               pointer :: slope  (:)   => null()  !< sfc slope type for lsm
    integer,               pointer :: slope_save (:) => null()!< sfc slope type save
    integer,               pointer :: vtype  (:)   => null()  !< vegetation type
    integer,               pointer :: stype  (:)   => null()  !< soil type
    integer,               pointer :: vtype_save (:) => null()!< vegetation type save
    integer,               pointer :: stype_save (:) => null()!< soil type save
  end type GFS_sfcprop_type
! GFS_coupling_type
!! \section arg_table_GFS_coupling_type
!! \htmlinclude GFS_coupling_type.html
  type GFS_coupling_type
                                                                 !< GFS_radtend_type%sfcfsw%dnfxc
                                                                 !< difference of dnfxc & upfxc from GFS_radtend_type%sfcfsw
                                                                 !< GFS_radtend_type%sfclsw%dnfxc
    real (kind=kind_phys), pointer :: oro_cpl    (:) => null()   !< orography          (  oro from GFS_sfcprop_type)
    real (kind=kind_phys), pointer :: slmsk_cpl  (:) => null()   !< Land/Sea/Ice mask  (slmsk from GFS_sfcprop_type)
  end type GFS_coupling_type
  type dtend_var_label
  end type dtend_var_label
  type dtend_process_label
  end type dtend_process_label
! GFS_control_type
!! \section arg_table_GFS_control_type
!! \htmlinclude GFS_control_type.html
  type GFS_control_type
    integer              :: ialb            !< use climatology alb, based on sfc type
    integer              :: idcor           !< Decorrelation length type for overlap assumption
    character(len=16)    :: mg_precip_frac_method ! type of precipitation fraction method
    integer              :: ncnd            !< number of cloud condensate types
    integer              :: isot            !< isot = 0   => Zobler soil type  ( 9 category)
                                            !< isot = 1   => STATSGO soil type (19 category, AKA 'STAS'(?))
                                            !< isot = 2   => STAS-RUC soil type (19 category, NOAH WRFv4 only)
    real(kind=kind_phys), pointer :: pores(:) => null() !< max soil moisture for a given soil type for land surface model
    real(kind=kind_phys), pointer :: resid(:) => null() !< min soil moisture for a given soil type for land surface model
    logical              :: cal_pre         !< flag controls precip type algorithm
    integer              :: sfc_z0_type     !< surface roughness options over ocean:
    integer              :: lndp_type         ! integer indicating land perturbation scheme type:
    ! next two are duplicated here to support lndp_type=1. If delete that scheme, could remove from GFS defs?
    type(dtend_var_label), pointer :: dtend_var_labels(:) => null()         !< information about first dim of dtidx
    type(dtend_process_label), pointer :: dtend_process_labels(:) => null() !< information about second dim of dtidx
    integer              :: nctp            !< number of cloud types in Chikira-Sugiyama scheme
  end type GFS_control_type
! GFS_grid_type
!! \section arg_table_GFS_grid_type
!! \htmlinclude GFS_grid_type.html
  type GFS_grid_type
  end type GFS_grid_type
! GFS_tbd_type
!! \section arg_table_GFS_tbd_type
!! \htmlinclude GFS_tbd_type.html
  type GFS_tbd_type
    real (kind=kind_phys), pointer :: dtotprcp  (:)    => null()  !< change in totprcp  (diag_type)
    real (kind=kind_phys), pointer :: dcnvprcp  (:)    => null()  !< change in cnvprcp  (diag_type)
    real (kind=kind_phys), pointer :: drain_cpl (:)    => null()  !< change in rain_cpl (coupling_type)
    real (kind=kind_phys), pointer :: dsnow_cpl (:)    => null()  !< change in show_cpl (coupling_type)
!--- Diagnostic that needs to be carried over to the next time step (removed from diag_type)
  end type GFS_tbd_type
! GFS_cldprop_type
!! \section arg_table_GFS_cldprop_type
!! \htmlinclude GFS_cldprop_type.html
  type GFS_cldprop_type
  end type GFS_cldprop_type
! GFS_radtend_type
!! \section arg_table_GFS_radtend_type
!! \htmlinclude GFS_radtend_type.html
  type GFS_radtend_type
    type (sfcfsw_type),    pointer :: sfcfsw(:)   => null()   !< sw radiation fluxes at sfc
    type (sfcflw_type),    pointer :: sfcflw(:)    => null()  !< lw radiation fluxes at sfc
  end type GFS_radtend_type
! GFS_diag_type
!  internal diagnostic type used as arguments to gbphys and grrad
!! \section arg_table_GFS_diag_type
!! \htmlinclude GFS_diag_type.html
  type GFS_diag_type
    type (topfsw_type),    pointer :: topfsw(:)      => null()   !< sw radiation fluxes at toa, components:
    type (topflw_type),    pointer :: topflw(:)      => null()   !< lw radiation fluxes at top, component:
    real (kind=kind_phys), pointer :: tdomr  (:)     => null()   !< dominant accumulated rain type
    real (kind=kind_phys), pointer :: tdomzr (:)     => null()   !< dominant accumulated freezing rain type
    real (kind=kind_phys), pointer :: tdomip (:)     => null()   !< dominant accumulated sleet type
    real (kind=kind_phys), pointer :: tdoms  (:)     => null()   !< dominant accumulated snow type
  end type GFS_diag_type
! combined type of all of the above except GFS_control_type
!! \section arg_table_GFS_data_type
!! \htmlinclude GFS_data_type.html
  type GFS_data_type
     type(GFS_statein_type)  :: Statein
     type(GFS_stateout_type) :: Stateout
     type(GFS_sfcprop_type)  :: Sfcprop
     type(GFS_coupling_type) :: Coupling
     type(GFS_grid_type)     :: Grid
     type(GFS_tbd_type)      :: Tbd
     type(GFS_cldprop_type)  :: Cldprop
     type(GFS_radtend_type)  :: Radtend
     type(GFS_diag_type)     :: Intdiag
  end type GFS_data_type
  public GFS_init_type
  public GFS_statein_type,  GFS_stateout_type, GFS_sfcprop_type, &
         GFS_coupling_type
  public GFS_control_type,  GFS_grid_type,     GFS_tbd_type, &
         GFS_cldprop_type,  GFS_radtend_type,  GFS_diag_type
  public GFS_data_type
! GFS_statein_type%create
    class(GFS_statein_type)             :: Statein
    type(GFS_control_type),  intent(in) :: Model
! GFS_stateout_type%create
    class(GFS_stateout_type)           :: Stateout
    type(GFS_control_type), intent(in) :: Model
! GFS_sfcprop_type%create
    class(GFS_sfcprop_type)            :: Sfcprop
    type(GFS_control_type), intent(in) :: Model
    allocate (Sfcprop%vtype      (IM))
    allocate (Sfcprop%vtype_save (IM))
    allocate (Sfcprop%stype      (IM))
    allocate (Sfcprop%stype_save (IM))
    Sfcprop%vtype      = zero
    Sfcprop%vtype_save = zero
    Sfcprop%stype      = zero
    Sfcprop%stype_save = zero
! GFS_coupling_type%create
    class(GFS_coupling_type)           :: Coupling
    type(GFS_control_type), intent(in) :: Model
    if (Model%lndp_type /= 0) then
! GFS_control_type%init
                                 nwat, tracer_names, tracer_types,  &
    class(GFS_control_type)            :: Model
    integer,                intent(in) :: tracer_types(:)
    integer              :: ialb           =  0              !< use climatology alb, based on sfc type
    integer              :: idcor = 1                        !< Decorrelation length type for overlap assumption
    character(len=16)    :: mg_precip_frac_method = 'max_overlap'  !< type of precipitation fraction method
    integer              :: isot           =  0              !< isot = 0   => Zobler soil type  ( 9 category)
                                                             !< isot = 1   => STATSGO soil type (19 category)
    logical              :: cal_pre        = .false.                  !< flag controls precip type algorithm
    integer              :: sfc_z0_type    = 0               !< surface roughness options over ocean
    integer :: lndp_type      = 0
                               lndp_type,  n_var_lndp,                                      &
                               sfc_z0_type,                                                 &
    integer :: nctp    =  0                !< number of cloud types in CS scheme
      write(0,*) 'Logic error in GFS_typedefs.F90: qdiag3d requires ldiag3d'
      write(0,*) "Error, number of requested auxiliary 2d arrays exceeds the maximum defined in GFS_typedefs.F90"
      write(0,*) "Error, number of requested auxiliary 3d arrays exceeds the maximum defined in GFS_typedefs.F90"
        write(0,*) 'Error in GFS_typedefs.F90, number of soil layers must be 4 for Noah/NoahMP'
        write(0,*) 'Error in GFS_typedefs.F90, number of soil layers must be 9 for RUC'
        write(0,*) 'Error in GFS_typedefs.F90, number of ice model layers must be 2 for Noah/NoahMP/Noah_WRFv4'
        write(0,*) 'Error in GFS_typedefs.F90, number of ice model layers must be 9 for RUC'
    ! Allocate variable for min/max soil moisture for a given soil type
    Model%sfc_z0_type      = sfc_z0_type
    if (Model%cplwav2atm) Model%sfc_z0_type = -1
    ! do_sppt, do_shum, do_skeb and lndp_type are namelist variables in group
    Model%lndp_type        = lndp_type
    if (Model%lndp_type/=0) then
    call Model%init_chemistry(tracer_types)
       ! have_cnvtrans flag must match logic elsewhere in GFS_typedefs and suite interstitials.
        ! Other tracer names. These were taken from GFS_typedefs.F90 with descriptions from GFS_typedefs.meta
!--- set number of cloud types
          print *,'Vegetation type must be IGBP if Noah MP is used'
          print *,'Soil type must be STATSGO if Noah MP is used'
        print *,' Unsupported LSM type - job aborted - lsm=',Model%lsm
    Model%ncnd     = nwat - 1                   ! ncnd is the number of cloud condensate types
    class(GFS_control_type) :: Model
  subroutine control_chemistry_initialize(Model, tracer_types)
    class(GFS_control_type) :: Model
    integer,     intent(in) :: tracer_types(:)
    do n = 1, size(tracer_types)
      select case (tracer_types(n))
    class(GFS_control_type)      :: Model
    class(GFS_control_type) :: Model
      print *, ' sfc_z0_type       : ', Model%sfc_z0_type
      print *, ' lndp_type         : ', Model%lndp_type
    class(GFS_grid_type)               :: Grid
    type(GFS_control_type), intent(in) :: Model
! GFS_tbd_type%create
    class(GFS_tbd_type)                :: Tbd
    type(GFS_control_type), intent(in) :: Model
! GFS_cldprop_type%create
    class(GFS_cldprop_type)            :: Cldprop
    type(GFS_control_type), intent(in) :: Model
! GFS_radtend_type%create
    class(GFS_radtend_type)            :: Radtend
    type(GFS_control_type), intent(in) :: Model
    class(GFS_control_type), intent(inout) :: Model
    type(GFS_control_type), intent(inout) :: Model
    type(GFS_control_type), intent(inout) :: Model
    type(GFS_control_type), intent(inout) :: Model
    class(GFS_diag_type)               :: Diag
    type(GFS_control_type), intent(in) :: Model
    class(GFS_diag_type)               :: Diag
    type(GFS_control_type), intent(in) :: Model
    class(GFS_diag_type)               :: Diag
    type(GFS_control_type), intent(in) :: Model
end module GFS_typedefs
